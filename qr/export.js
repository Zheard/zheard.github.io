   (function (b, a) { typeof exports === "object" && typeof module !== "undefined" ? module.exports = a() : typeof define === "function" && define.amd ? define(a) : (b = b || self, b.Cropper = a()) }(this, (function () { function F(b0) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { F = function (b1) { return typeof b1 } } else { F = function (b1) { return b1 && typeof Symbol === "function" && b1.constructor === Symbol && b1 !== Symbol.prototype ? "symbol" : typeof b1 } } return F(b0) } function aB(b0, b1) { if (!(b0 instanceof b1)) { throw new TypeError("Cannot call a class as a function") } } function bK(b3, b1) { for (var b0 = 0; b0 < b1.length; b0++) { var b2 = b1[b0]; b2.enumerable = b2.enumerable || false; b2.configurable = true; if ("value" in b2) { b2.writable = true } Object.defineProperty(b3, b2.key, b2) } } function a6(b2, b0, b1) { if (b0) { bK(b2.prototype, b0) } if (b1) { bK(b2, b1) } return b2 } function bg(b2, b0, b1) { if (b0 in b2) { Object.defineProperty(b2, b0, { value: b1, enumerable: true, configurable: true, writable: true }) } else { b2[b0] = b1 } return b2 } function bG(b1, b2) { var b3 = Object.keys(b1); if (Object.getOwnPropertySymbols) { var b0 = Object.getOwnPropertySymbols(b1); if (b2) { b0 = b0.filter(function (b4) { return Object.getOwnPropertyDescriptor(b1, b4).enumerable }) } b3.push.apply(b3, b0) } return b3 } function bU(b2) { for (var b0 = 1; b0 < arguments.length; b0++) { var b1 = arguments[b0] != null ? arguments[b0] : {}; if (b0 % 2) { bG(Object(b1), true).forEach(function (b3) { bg(b2, b3, b1[b3]) }) } else { if (Object.getOwnPropertyDescriptors) { Object.defineProperties(b2, Object.getOwnPropertyDescriptors(b1)) } else { bG(Object(b1)).forEach(function (b3) { Object.defineProperty(b2, b3, Object.getOwnPropertyDescriptor(b1, b3)) }) } } } return b2 } function am(b0) { return aF(b0) || au(b0) || aX(b0) || q() } function aF(b0) { if (Array.isArray(b0)) { return bc(b0) } } function au(b0) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(b0)) { return Array.from(b0) } } function aX(b1, b0) { if (!b1) { return } if (typeof b1 === "string") { return bc(b1, b0) } var b2 = Object.prototype.toString.call(b1).slice(8, -1); if (b2 === "Object" && b1.constructor) { b2 = b1.constructor.name } if (b2 === "Map" || b2 === "Set") { return Array.from(b1) } if (b2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(b2)) { return bc(b1, b0) } } function bc(b1, b0) { if (b0 == null || b0 > b1.length) { b0 = b1.length } for (var b3 = 0, b2 = new Array(b0); b3 < b0; b3++) { b2[b3] = b1[b3] } return b2 } function q() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } var h = typeof window !== "undefined" && typeof window.document !== "undefined"; var av = h ? window : {}; var O = h && av.document.documentElement ? "ontouchstart" in av.document.documentElement : false; var bx = h ? "PointerEvent" in av : false; var L = "cropper"; var ad = "all"; var bb = "crop"; var bI = "move"; var E = "zoom"; var ax = "e"; var W = "w"; var b = "s"; var bT = "n"; var aY = "ne"; var aC = "nw"; var e = "se"; var bJ = "sw"; var by = "".concat(L, "-crop"); var f = "".concat(L, "-disabled"); var g = "".concat(L, "-hidden"); var ai = "".concat(L, "-hide"); var ah = "".concat(L, "-invisible"); var bm = "".concat(L, "-modal"); var bX = "".concat(L, "-move"); var bn = "".concat(L, "Action"); var a0 = "".concat(L, "Preview"); var ap = "crop"; var aM = "move"; var ar = "none"; var bM = "crop"; var aW = "cropend"; var bR = "cropmove"; var C = "cropstart"; var bN = "dblclick"; var bl = O ? "touchstart" : "mousedown"; var bf = O ? "touchmove" : "mousemove"; var H = O ? "touchend touchcancel" : "mouseup"; var bu = bx ? "pointerdown" : bl; var bE = bx ? "pointermove" : bf; var bO = bx ? "pointerup pointercancel" : H; var aj = "ready"; var ay = "resize"; var aJ = "wheel"; var ao = "zoom"; var aH = "image/jpeg"; var R = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/; var a7 = /^data:/; var bD = /^data:image\/jpeg;base64,/; var a8 = /^img|canvas$/i; var U = { viewMode: 0, dragMode: ap, initialAspectRatio: NaN, aspectRatio: NaN, data: null, preview: "", responsive: true, restore: true, checkCrossOrigin: true, checkOrientation: true, modal: true, guides: true, center: true, highlight: true, background: true, autoCrop: true, autoCropArea: 0.8, movable: true, rotatable: true, scalable: true, zoomable: true, zoomOnTouch: true, zoomOnWheel: true, wheelZoomRatio: 0.1, cropBoxMovable: true, cropBoxResizable: true, toggleDragModeOnDblclick: true, minCanvasWidth: 0, minCanvasHeight: 0, minCropBoxWidth: 0, minCropBoxHeight: 0, minContainerWidth: 200, minContainerHeight: 100, ready: null, cropstart: null, cropmove: null, cropend: null, crop: null, zoom: null }; var ak = '<div class="cropper-container" touch-action="none"><div class="cropper-wrap-box"><div class="cropper-canvas"></div></div><div class="cropper-drag-box"></div><div class="cropper-crop-box"><span class="cropper-view-box"></span><span class="cropper-dashed dashed-h"></span><span class="cropper-dashed dashed-v"></span><span class="cropper-center"></span><span class="cropper-face"></span><span class="cropper-line line-e" data-cropper-action="e"></span><span class="cropper-line line-n" data-cropper-action="n"></span><span class="cropper-line line-w" data-cropper-action="w"></span><span class="cropper-line line-s" data-cropper-action="s"></span><span class="cropper-point point-e" data-cropper-action="e"></span><span class="cropper-point point-n" data-cropper-action="n"></span><span class="cropper-point point-w" data-cropper-action="w"></span><span class="cropper-point point-s" data-cropper-action="s"></span><span class="cropper-point point-ne" data-cropper-action="ne"></span><span class="cropper-point point-nw" data-cropper-action="nw"></span><span class="cropper-point point-sw" data-cropper-action="sw"></span><span class="cropper-point point-se" data-cropper-action="se"></span></div></div>'; var aG = Number.isNaN || av.isNaN; function ae(b0) { return typeof b0 === "number" && !aG(b0) } var bA = function bA(b0) { return b0 > 0 && b0 < Infinity }; function aN(b0) { return typeof b0 === "undefined" } function bW(b0) { return F(b0) === "object" && b0 !== null } var I = Object.prototype.hasOwnProperty; function w(b2) { if (!bW(b2)) { return false } try { var b3 = b2.constructor; var b1 = b3.prototype; return b3 && b1 && I.call(b1, "isPrototypeOf") } catch (b0) { return false } } function n(b0) { return typeof b0 === "function" } var B = Array.prototype.slice; function s(b0) { return Array.from ? Array.from(b0) : B.call(b0) } function aq(b0, b1) { if (b0 && n(b1)) { if (Array.isArray(b0) || ae(b0.length)) { s(b0).forEach(function (b3, b2) { b1.call(b0, b3, b2, b0) }) } else { if (bW(b0)) { Object.keys(b0).forEach(function (b2) { b1.call(b0, b0[b2], b2, b0) }) } } } return b0 } var af = Object.assign || function af(b3) { for (var b0 = arguments.length, b1 = new Array(b0 > 1 ? b0 - 1 : 0), b2 = 1; b2 < b0; b2++) { b1[b2 - 1] = arguments[b2] } if (bW(b3) && b1.length > 0) { b1.forEach(function (b4) { if (bW(b4)) { Object.keys(b4).forEach(function (b5) { b3[b5] = b4[b5] }) } }) } return b3 }; var bj = /\.\d*(?:0|9){12}\d*$/; function bo(b0) { var b1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000; return bj.test(b0) ? Math.round(b0 * b1) / b1 : b0 } var i = /^width|height|left|top|marginLeft|marginTop$/; function S(b0, b2) { var b1 = b0.style; aq(b2, function (b4, b3) { if (i.test(b3) && ae(b4)) { b4 = "".concat(b4, "px") } b1[b3] = b4 }) } function z(b0, b1) { return b0.classList ? b0.classList.contains(b1) : b0.className.indexOf(b1) > -1 } function x(b0, b2) { if (!b2) { return } if (ae(b0.length)) { aq(b0, function (b3) { x(b3, b2) }); return } if (b0.classList) { b0.classList.add(b2); return } var b1 = b0.className.trim(); if (!b1) { b0.className = b2 } else { if (b1.indexOf(b2) < 0) { b0.className = "".concat(b1, " ").concat(b2) } } } function a3(b0, b1) { if (!b1) { return } if (ae(b0.length)) { aq(b0, function (b2) { a3(b2, b1) }); return } if (b0.classList) { b0.classList.remove(b1); return } if (b0.className.indexOf(b1) >= 0) { b0.className = b0.className.replace(b1, "") } } function a1(b0, b2, b1) { if (!b2) { return } if (ae(b0.length)) { aq(b0, function (b3) { a1(b3, b2, b1) }); return } if (b1) { x(b0, b2) } else { a3(b0, b2) } } var u = /([a-z\d])([A-Z])/g; function az(b0) { return b0.replace(u, "$1-$2").toLowerCase() } function be(b1, b0) { if (bW(b1[b0])) { return b1[b0] } if (b1.dataset) { return b1.dataset[b0] } return b1.getAttribute("data-".concat(az(b0))) } function at(b1, b0, b2) { if (bW(b2)) { b1[b0] = b2 } else { if (b1.dataset) { b1.dataset[b0] = b2 } else { b1.setAttribute("data-".concat(az(b0)), b2) } } } function p(b2, b1) { if (bW(b2[b1])) { try { delete b2[b1] } catch (b0) { b2[b1] = undefined } } else { if (b2.dataset) { try { delete b2.dataset[b1] } catch (b0) { b2.dataset[b1] = undefined } } else { b2.removeAttribute("data-".concat(az(b1))) } } } var G = /\s\s*/; var aI = function () { var b0 = false; if (h) { var b3 = false; var b4 = function b4() { }; var b2 = Object.defineProperty({}, "once", { get: function b1() { b0 = true; return b3 }, set: function b5(b6) { b3 = b6 } }); av.addEventListener("test", b4, b2); av.removeEventListener("test", b4, b2) } return b0 }(); function j(b1, b3, b4) { var b0 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}; var b2 = b4; b3.trim().split(G).forEach(function (b6) { if (!aI) { var b5 = b1.listeners; if (b5 && b5[b6] && b5[b6][b4]) { b2 = b5[b6][b4]; delete b5[b6][b4]; if (Object.keys(b5[b6]).length === 0) { delete b5[b6] } if (Object.keys(b5).length === 0) { delete b1.listeners } } } b1.removeEventListener(b6, b2, b0) }) } function bt(b2, b3, b4) { var b1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {}; var b0 = b4; b3.trim().split(G).forEach(function (b8) { if (b1.once && !aI) { var b5 = b2.listeners, b7 = b5 === void 0 ? {} : b5; b0 = function b6() { delete b7[b8][b4]; b2.removeEventListener(b8, b0, b1); for (var b9 = arguments.length, cb = new Array(b9), ca = 0; ca < b9; ca++) { cb[ca] = arguments[ca] } b4.apply(b2, cb) }; if (!b7[b8]) { b7[b8] = {} } if (b7[b8][b4]) { b2.removeEventListener(b8, b7[b8][b4], b1) } b7[b8][b4] = b0; b2.listeners = b7 } b2.addEventListener(b8, b0, b1) }) } function aR(b0, b1, b3) { var b2; if (n(Event) && n(CustomEvent)) { b2 = new CustomEvent(b1, { detail: b3, bubbles: true, cancelable: true }) } else { b2 = document.createEvent("CustomEvent"); b2.initCustomEvent(b1, true, true, b3) } return b0.dispatchEvent(b2) } function bV(b0) { var b1 = b0.getBoundingClientRect(); return { left: b1.left + (window.pageXOffset - document.documentElement.clientLeft), top: b1.top + (window.pageYOffset - document.documentElement.clientTop) } } var aK = av.location; var aO = /^(\w+:)\/\/([^:/?#]*):?(\d*)/i; function bi(b0) { var b1 = b0.match(aO); return b1 !== null && (b1[1] !== aK.protocol || b1[2] !== aK.hostname || b1[3] !== aK.port) } function bP(b0) { var b1 = "timestamp=".concat(new Date().getTime()); return b0 + (b0.indexOf("?") === -1 ? "?" : "&") + b1 } function J(b5) { var b4 = b5.rotate, b3 = b5.scaleX, b1 = b5.scaleY, b7 = b5.translateX, b6 = b5.translateY; var b0 = []; if (ae(b7) && b7 !== 0) { b0.push("translateX(".concat(b7, "px)")) } if (ae(b6) && b6 !== 0) { b0.push("translateY(".concat(b6, "px)")) } if (ae(b4) && b4 !== 0) { b0.push("rotate(".concat(b4, "deg)")) } if (ae(b3) && b3 !== 1) { b0.push("scaleX(".concat(b3, ")")) } if (ae(b1) && b1 !== 1) { b0.push("scaleY(".concat(b1, ")")) } var b2 = b0.length ? b0.join(" ") : "none"; return { WebkitTransform: b2, msTransform: b2, transform: b2 } } function bd(b0) { var b2 = bU({}, b0); var b1 = []; aq(b0, function (b4, b3) { delete b2[b3]; aq(b2, function (b5) { var b7 = Math.abs(b4.startX - b5.startX); var ca = Math.abs(b4.startY - b5.startY); var b6 = Math.abs(b4.endX - b5.endX); var b8 = Math.abs(b4.endY - b5.endY); var cc = Math.sqrt(b7 * b7 + ca * ca); var cb = Math.sqrt(b6 * b6 + b8 * b8); var b9 = (cb - cc) / cc; b1.push(b9) }) }); b1.sort(function (b4, b3) { return Math.abs(b4) < Math.abs(b3) }); return b1[0] } function aA(b4, b3) { var b2 = b4.pageX, b1 = b4.pageY; var b0 = { endX: b2, endY: b1 }; return b3 ? b0 : bU({ startX: b2, startY: b1 }, b0) } function bs(b0) { var b2 = 0; var b1 = 0; var b3 = 0; aq(b0, function (b6) { var b5 = b6.startX, b4 = b6.startY; b2 += b5; b1 += b4; b3 += 1 }); b2 /= b3; b1 /= b3; return { pageX: b2, pageY: b1 } } function bv(b7) { var b4 = b7.aspectRatio, b0 = b7.height, b3 = b7.width; var b2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "contain"; var b6 = bA(b3); var b5 = bA(b0); if (b6 && b5) { var b1 = b0 * b4; if (b2 === "contain" && b1 > b3 || b2 === "cover" && b1 < b3) { b0 = b3 / b4 } else { b3 = b0 * b4 } } else { if (b6) { b0 = b3 / b4 } else { if (b5) { b3 = b0 * b4 } } } return { width: b3, height: b0 } } function bq(b3) { var b1 = b3.width, b8 = b3.height, b4 = b3.degree; b4 = Math.abs(b4) % 180; if (b4 === 90) { return { width: b8, height: b1 } } var b2 = b4 % 90 * Math.PI / 180; var b6 = Math.sin(b2); var b7 = Math.cos(b2); var b5 = b1 * b7 + b8 * b6; var b0 = b1 * b6 + b8 * b7; return b4 > 90 ? { width: b0, height: b5 } : { width: b5, height: b0 } } function a4(b3, b8, b7, b5) { var ck = b8.aspectRatio, cx = b8.naturalWidth, cs = b8.naturalHeight, cr = b8.rotate, cB = cr === void 0 ? 0 : cr, cf = b8.scaleX, cv = cf === void 0 ? 1 : cf, cd = b8.scaleY, cu = cd === void 0 ? 1 : cd; var cm = b7.aspectRatio, b6 = b7.naturalWidth, b9 = b7.naturalHeight; var cC = b5.fillColor, cE = cC === void 0 ? "transparent" : cC, cw = b5.imageSmoothingEnabled, cc = cw === void 0 ? true : cw, cn = b5.imageSmoothingQuality, ca = cn === void 0 ? "low" : cn, cp = b5.maxWidth, cl = cp === void 0 ? Infinity : cp, cy = b5.maxHeight, cA = cy === void 0 ? Infinity : cy, ci = b5.minWidth, cb = ci === void 0 ? 0 : ci, ce = b5.minHeight, cj = ce === void 0 ? 0 : ce; var b4 = document.createElement("canvas"); var cD = b4.getContext("2d"); var cz = bv({ aspectRatio: cm, width: cl, height: cA }); var ct = bv({ aspectRatio: cm, width: cb, height: cj }, "cover"); var b0 = Math.min(cz.width, Math.max(ct.width, b6)); var b2 = Math.min(cz.height, Math.max(ct.height, b9)); var co = bv({ aspectRatio: ck, width: cl, height: cA }); var ch = bv({ aspectRatio: ck, width: cb, height: cj }, "cover"); var cg = Math.min(co.width, Math.max(ch.width, cx)); var cq = Math.min(co.height, Math.max(ch.height, cs)); var b1 = [-cg / 2, -cq / 2, cg, cq]; b4.width = bo(b0); b4.height = bo(b2); cD.fillStyle = cE; cD.fillRect(0, 0, b0, b2); cD.save(); cD.translate(b0 / 2, b2 / 2); cD.rotate(cB * Math.PI / 180); cD.scale(cv, cu); cD.imageSmoothingEnabled = cc; cD.imageSmoothingQuality = ca; cD.drawImage.apply(cD, [b3].concat(am(b1.map(function (cF) { return Math.floor(bo(cF)) })))); cD.restore(); return b4 } var r = String.fromCharCode; function N(b3, b4, b1) { var b2 = ""; b1 += b4; for (var b0 = b4; b0 < b1; b0 += 1) { b2 += r(b3.getUint8(b0)) } return b2 } var aa = /^data:.*,/; function aE(b3) { var b1 = b3.replace(aa, ""); var b4 = atob(b1); var b2 = new ArrayBuffer(b4.length); var b0 = new Uint8Array(b2); aq(b0, function (b6, b5) { b0[b5] = b4.charCodeAt(b5) }); return b2 } function Z(b1, b2) { var b4 = []; var b3 = 8192; var b0 = new Uint8Array(b1); while (b0.length > 0) { b4.push(r.apply(null, s(b0.subarray(0, b3)))); b0 = b0.subarray(b3) } return "data:".concat(b2, ";base64,").concat(btoa(b4.join(""))) } function y(b7) { var cc = new DataView(b7); var b2; try { var b1; var b6; var cf; if (cc.getUint8(0) === 255 && cc.getUint8(1) === 216) { var b3 = cc.byteLength; var b4 = 2; while (b4 + 1 < b3) { if (cc.getUint8(b4) === 255 && cc.getUint8(b4 + 1) === 225) { b6 = b4; break } b4 += 1 } } if (b6) { var ce = b6 + 4; var cb = b6 + 10; if (N(cc, ce, 4) === "Exif") { var b9 = cc.getUint16(cb); b1 = b9 === 18761; if (b1 || b9 === 19789) { if (cc.getUint16(cb + 2, b1) === 42) { var b0 = cc.getUint32(cb + 4, b1); if (b0 >= 8) { cf = cb + b0 } } } } } if (cf) { var b8 = cc.getUint16(cf, b1); var cd; var b5; for (b5 = 0; b5 < b8; b5 += 1) { cd = cf + b5 * 12 + 2; if (cc.getUint16(cd, b1) === 274) { cd += 8; b2 = cc.getUint16(cd, b1); cc.setUint16(cd, 1, b1); break } } } } catch (ca) { b2 = 1 } return b2 } function k(b1) { var b3 = 0; var b2 = 1; var b0 = 1; switch (b1) { case 2: b2 = -1; break; case 3: b3 = -180; break; case 4: b0 = -1; break; case 5: b3 = 90; b0 = -1; break; case 6: b3 = 90; break; case 7: b3 = 90; b2 = -1; break; case 8: b3 = -90; break }return { rotate: b3, scaleX: b2, scaleY: b0 } } var X = { render: function X() { this.initContainer(); this.initCanvas(); this.initCropBox(); this.renderCanvas(); if (this.cropped) { this.renderCropBox() } }, initContainer: function bp() { var b3 = this.element, b2 = this.options, b1 = this.container, b4 = this.cropper; x(b4, g); a3(b3, g); var b0 = { width: Math.max(b1.offsetWidth, Number(b2.minContainerWidth) || 200), height: Math.max(b1.offsetHeight, Number(b2.minContainerHeight) || 100) }; this.containerData = b0; S(b4, { width: b0.width, height: b0.height }); x(b3, g); a3(b4, g) }, initCanvas: function br() { var b7 = this.containerData, b0 = this.imageData; var b2 = this.options.viewMode; var b1 = Math.abs(b0.rotate) % 180 === 90; var b6 = b1 ? b0.naturalHeight : b0.naturalWidth; var b8 = b1 ? b0.naturalWidth : b0.naturalHeight; var b9 = b6 / b8; var b3 = b7.width; var b5 = b7.height; if (b7.height * b9 > b7.width) { if (b2 === 3) { b3 = b7.height * b9 } else { b5 = b7.width / b9 } } else { if (b2 === 3) { b5 = b7.width / b9 } else { b3 = b7.height * b9 } } var b4 = { aspectRatio: b9, naturalWidth: b6, naturalHeight: b8, width: b3, height: b5 }; b4.left = (b7.width - b3) / 2; b4.top = (b7.height - b5) / 2; b4.oldLeft = b4.left; b4.oldTop = b4.top; this.canvasData = b4; this.limited = b2 === 1 || b2 === 2; this.limitCanvas(true, true); this.initialImageData = af({}, b0); this.initialCanvasData = af({}, b4) }, limitCanvas: function bk(b0, b5) { var cd = this.options, b7 = this.containerData, b6 = this.canvasData, b3 = this.cropBoxData; var b4 = cd.viewMode; var cb = b6.aspectRatio; var ca = this.cropped && b3; if (b0) { var cc = Number(cd.minCanvasWidth) || 0; var b8 = Number(cd.minCanvasHeight) || 0; if (b4 > 1) { cc = Math.max(cc, b7.width); b8 = Math.max(b8, b7.height); if (b4 === 3) { if (b8 * cb > cc) { cc = b8 * cb } else { b8 = cc / cb } } } else { if (b4 > 0) { if (cc) { cc = Math.max(cc, ca ? b3.width : 0) } else { if (b8) { b8 = Math.max(b8, ca ? b3.height : 0) } else { if (ca) { cc = b3.width; b8 = b3.height; if (b8 * cb > cc) { cc = b8 * cb } else { b8 = cc / cb } } } } } } var b1 = bv({ aspectRatio: cb, width: cc, height: b8 }); cc = b1.width; b8 = b1.height; b6.minWidth = cc; b6.minHeight = b8; b6.maxWidth = Infinity; b6.maxHeight = Infinity } if (b5) { if (b4 > (ca ? 0 : 1)) { var b2 = b7.width - b6.width; var b9 = b7.height - b6.height; b6.minLeft = Math.min(0, b2); b6.minTop = Math.min(0, b9); b6.maxLeft = Math.max(0, b2); b6.maxTop = Math.max(0, b9); if (ca && this.limited) { b6.minLeft = Math.min(b3.left, b3.left + (b3.width - b6.width)); b6.minTop = Math.min(b3.top, b3.top + (b3.height - b6.height)); b6.maxLeft = b3.left; b6.maxTop = b3.top; if (b4 === 2) { if (b6.width >= b7.width) { b6.minLeft = Math.min(0, b2); b6.maxLeft = Math.max(0, b2) } if (b6.height >= b7.height) { b6.minTop = Math.min(0, b9); b6.maxTop = Math.max(0, b9) } } } } else { b6.minLeft = -b6.width; b6.minTop = -b6.height; b6.maxLeft = b7.width; b6.maxTop = b7.height } } }, renderCanvas: function bF(b5, b3) { var b4 = this.canvasData, b0 = this.imageData; if (b3) { var b2 = bq({ width: b0.naturalWidth * Math.abs(b0.scaleX || 1), height: b0.naturalHeight * Math.abs(b0.scaleY || 1), degree: b0.rotate || 0 }), b6 = b2.width, b7 = b2.height; var b1 = b4.width * (b6 / b4.naturalWidth); var b8 = b4.height * (b7 / b4.naturalHeight); b4.left -= (b1 - b4.width) / 2; b4.top -= (b8 - b4.height) / 2; b4.width = b1; b4.height = b8; b4.aspectRatio = b6 / b7; b4.naturalWidth = b6; b4.naturalHeight = b7; this.limitCanvas(true, false) } if (b4.width > b4.maxWidth || b4.width < b4.minWidth) { b4.left = b4.oldLeft } if (b4.height > b4.maxHeight || b4.height < b4.minHeight) { b4.top = b4.oldTop } b4.width = Math.min(Math.max(b4.width, b4.minWidth), b4.maxWidth); b4.height = Math.min(Math.max(b4.height, b4.minHeight), b4.maxHeight); this.limitCanvas(false, true); b4.left = Math.min(Math.max(b4.left, b4.minLeft), b4.maxLeft); b4.top = Math.min(Math.max(b4.top, b4.minTop), b4.maxTop); b4.oldLeft = b4.left; b4.oldTop = b4.top; S(this.canvas, af({ width: b4.width, height: b4.height }, J({ translateX: b4.left, translateY: b4.top }))); this.renderImage(b5); if (this.cropped && this.limited) { this.limitCropBox(true, true) } }, renderImage: function bH(b3) { var b1 = this.canvasData, b4 = this.imageData; var b2 = b4.naturalWidth * (b1.width / b1.naturalWidth); var b0 = b4.naturalHeight * (b1.height / b1.naturalHeight); af(b4, { width: b2, height: b0, left: (b1.width - b2) / 2, top: (b1.height - b0) / 2 }); S(this.image, af({ width: b4.width, height: b4.height }, J(af({ translateX: b4.left, translateY: b4.top }, b4)))); if (b3) { this.output() } }, initCropBox: function d() { var b1 = this.options, b0 = this.canvasData; var b2 = b1.aspectRatio || b1.initialAspectRatio; var b4 = Number(b1.autoCropArea) || 0.8; var b3 = { width: b0.width, height: b0.height }; if (b2) { if (b0.height * b2 > b0.width) { b3.height = b3.width / b2 } else { b3.width = b3.height * b2 } } this.cropBoxData = b3; this.limitCropBox(true, true); b3.width = Math.min(Math.max(b3.width, b3.minWidth), b3.maxWidth); b3.height = Math.min(Math.max(b3.height, b3.minHeight), b3.maxHeight); b3.width = Math.max(b3.minWidth, b3.width * b4); b3.height = Math.max(b3.minHeight, b3.height * b4); b3.left = b0.left + (b0.width - b3.width) / 2; b3.top = b0.top + (b0.height - b3.height) / 2; b3.oldLeft = b3.left; b3.oldTop = b3.top; this.initialCropBoxData = af({}, b3) }, limitCropBox: function bC(b0, b3) { var cb = this.options, b5 = this.containerData, b4 = this.canvasData, b2 = this.cropBoxData, b8 = this.limited; var ca = cb.aspectRatio; if (b0) { var b1 = Number(cb.minCropBoxWidth) || 0; var b6 = Number(cb.minCropBoxHeight) || 0; var b7 = b8 ? Math.min(b5.width, b4.width, b4.width + b4.left, b5.width - b4.left) : b5.width; var b9 = b8 ? Math.min(b5.height, b4.height, b4.height + b4.top, b5.height - b4.top) : b5.height; b1 = Math.min(b1, b5.width); b6 = Math.min(b6, b5.height); if (ca) { if (b1 && b6) { if (b6 * ca > b1) { b6 = b1 / ca } else { b1 = b6 * ca } } else { if (b1) { b6 = b1 / ca } else { if (b6) { b1 = b6 * ca } } } if (b9 * ca > b7) { b9 = b7 / ca } else { b7 = b9 * ca } } b2.minWidth = Math.min(b1, b7); b2.minHeight = Math.min(b6, b9); b2.maxWidth = b7; b2.maxHeight = b9 } if (b3) { if (b8) { b2.minLeft = Math.max(0, b4.left); b2.minTop = Math.max(0, b4.top); b2.maxLeft = Math.min(b5.width, b4.left + b4.width) - b2.width; b2.maxTop = Math.min(b5.height, b4.top + b4.height) - b2.height } else { b2.minLeft = 0; b2.minTop = 0; b2.maxLeft = b5.width - b2.width; b2.maxTop = b5.height - b2.height } } }, renderCropBox: function M() { var b1 = this.options, b0 = this.containerData, b2 = this.cropBoxData; if (b2.width > b2.maxWidth || b2.width < b2.minWidth) { b2.left = b2.oldLeft } if (b2.height > b2.maxHeight || b2.height < b2.minHeight) { b2.top = b2.oldTop } b2.width = Math.min(Math.max(b2.width, b2.minWidth), b2.maxWidth); b2.height = Math.min(Math.max(b2.height, b2.minHeight), b2.maxHeight); this.limitCropBox(false, true); b2.left = Math.min(Math.max(b2.left, b2.minLeft), b2.maxLeft); b2.top = Math.min(Math.max(b2.top, b2.minTop), b2.maxTop); b2.oldLeft = b2.left; b2.oldTop = b2.top; if (b1.movable && b1.cropBoxMovable) { at(this.face, bn, b2.width >= b0.width && b2.height >= b0.height ? bI : ad) } S(this.cropBox, af({ width: b2.width, height: b2.height }, J({ translateX: b2.left, translateY: b2.top }))); if (this.cropped && this.limited) { this.limitCanvas(true, true) } if (!this.disabled) { this.output() } }, output: function bS() { this.preview(); aR(this.element, bM, this.getData()) } }; var a = { initPreview: function bB() { var b2 = this.element, b0 = this.crossOrigin; var b6 = this.options.preview; var b1 = b0 ? this.crossOriginUrl : this.url; var b5 = b2.alt || "The image to preview"; var b4 = document.createElement("img"); if (b0) { b4.crossOrigin = b0 } b4.src = b1; b4.alt = b5; this.viewBox.appendChild(b4); this.viewBoxImage = b4; if (!b6) { return } var b3 = b6; if (typeof b6 === "string") { b3 = b2.ownerDocument.querySelectorAll(b6) } else { if (b6.querySelector) { b3 = [b6] } } this.previews = b3; aq(b3, function (b8) { var b7 = document.createElement("img"); at(b8, a0, { width: b8.offsetWidth, height: b8.offsetHeight, html: b8.innerHTML }); if (b0) { b7.crossOrigin = b0 } b7.src = b1; b7.alt = b5; b7.style.cssText = 'display:block;width:100%;height:auto;min-width:0!important;min-height:0!important;max-width:none!important;max-height:none!important;image-orientation:0deg!important;"'; b8.innerHTML = ""; b8.appendChild(b7) }) }, resetPreview: function bZ() { aq(this.previews, function (b0) { var b1 = be(b0, a0); S(b0, { width: b1.width, height: b1.height }); b0.innerHTML = b1.html; p(b0, a0) }) }, preview: function a() { var b0 = this.imageData, b5 = this.canvasData, b3 = this.cropBoxData; var b1 = b3.width, b6 = b3.height; var b2 = b0.width, b8 = b0.height; var b4 = b3.left - b5.left - b0.left; var b7 = b3.top - b5.top - b0.top; if (!this.cropped || this.disabled) { return } S(this.viewBoxImage, af({ width: b2, height: b8 }, J(af({ translateX: -b4, translateY: -b7 }, b0)))); aq(this.previews, function (ca) { var ce = be(ca, a0); var cf = ce.width; var cd = ce.height; var cc = cf; var b9 = cd; var cb = 1; if (b1) { cb = cf / b1; b9 = b6 * cb } if (b6 && b9 > cd) { cb = cd / b6; cc = b1 * cb; b9 = cd } S(ca, { width: cc, height: b9 }); S(ca.getElementsByTagName("img")[0], af({ width: b2 * cb, height: b8 * cb }, J(af({ translateX: -b4 * cb, translateY: -b7 * cb }, b0)))) }) } }; var bQ = { bind: function aQ() { var b1 = this.element, b0 = this.options, b2 = this.cropper; if (n(b0.cropstart)) { bt(b1, C, b0.cropstart) } if (n(b0.cropmove)) { bt(b1, bR, b0.cropmove) } if (n(b0.cropend)) { bt(b1, aW, b0.cropend) } if (n(b0.crop)) { bt(b1, bM, b0.crop) } if (n(b0.zoom)) { bt(b1, ao, b0.zoom) } bt(b2, bu, this.onCropStart = this.cropStart.bind(this)); if (b0.zoomable && b0.zoomOnWheel) { bt(b2, aJ, this.onWheel = this.wheel.bind(this), { passive: false, capture: true }) } if (b0.toggleDragModeOnDblclick) { bt(b2, bN, this.onDblclick = this.dblclick.bind(this)) } bt(b1.ownerDocument, bE, this.onCropMove = this.cropMove.bind(this)); bt(b1.ownerDocument, bO, this.onCropEnd = this.cropEnd.bind(this)); if (b0.responsive) { bt(window, ay, this.onResize = this.resize.bind(this)) } }, unbind: function bh() { var b1 = this.element, b0 = this.options, b2 = this.cropper; if (n(b0.cropstart)) { j(b1, C, b0.cropstart) } if (n(b0.cropmove)) { j(b1, bR, b0.cropmove) } if (n(b0.cropend)) { j(b1, aW, b0.cropend) } if (n(b0.crop)) { j(b1, bM, b0.crop) } if (n(b0.zoom)) { j(b1, ao, b0.zoom) } j(b2, bu, this.onCropStart); if (b0.zoomable && b0.zoomOnWheel) { j(b2, aJ, this.onWheel, { passive: false, capture: true }) } if (b0.toggleDragModeOnDblclick) { j(b2, bN, this.onDblclick) } j(b1.ownerDocument, bE, this.onCropMove); j(b1.ownerDocument, bO, this.onCropEnd); if (b0.responsive) { j(window, ay, this.onResize) } } }; var a2 = { resize: function A() { if (this.disabled) { return } var b3 = this.options, b1 = this.container, b0 = this.containerData; var b4 = b1.offsetWidth / b0.width; if (b4 !== 1 || b1.offsetHeight !== b0.height) { var b2; var b5; if (b3.restore) { b2 = this.getCanvasData(); b5 = this.getCropBoxData() } this.render(); if (b3.restore) { this.setCanvasData(aq(b2, function (b7, b6) { b2[b6] = b7 * b4 })); this.setCropBoxData(aq(b5, function (b7, b6) { b5[b6] = b7 * b4 })) } } }, dblclick: function ag() { if (this.disabled || this.options.dragMode === ar) { return } this.setDragMode(z(this.dragBox, by) ? aM : ap) }, wheel: function l(b1) { var b3 = this; var b0 = Number(this.options.wheelZoomRatio) || 0.1; var b2 = 1; if (this.disabled) { return } b1.preventDefault(); if (this.wheeling) { return } this.wheeling = true; setTimeout(function () { b3.wheeling = false }, 50); if (b1.deltaY) { b2 = b1.deltaY > 0 ? 1 : -1 } else { if (b1.wheelDelta) { b2 = -b1.wheelDelta / 120 } else { if (b1.detail) { b2 = b1.detail > 0 ? 1 : -1 } } } this.zoom(-b2 * b0, b1) }, cropStart: function ba(b4) { var b3 = b4.buttons, b2 = b4.button; if (this.disabled || (b4.type === "mousedown" || b4.type === "pointerdown" && b4.pointerType === "mouse") && (ae(b3) && b3 !== 1 || ae(b2) && b2 !== 0 || b4.ctrlKey)) { return } var b1 = this.options, b0 = this.pointers; var b5; if (b4.changedTouches) { aq(b4.changedTouches, function (b6) { b0[b6.identifier] = aA(b6) }) } else { b0[b4.pointerId || 0] = aA(b4) } if (Object.keys(b0).length > 1 && b1.zoomable && b1.zoomOnTouch) { b5 = E } else { b5 = be(b4.target, bn) } if (!R.test(b5)) { return } if (aR(this.element, C, { originalEvent: b4, action: b5 }) === false) { return } b4.preventDefault(); this.action = b5; this.cropping = false; if (b5 === bb) { this.cropping = true; x(this.dragBox, bm) } }, cropMove: function aU(b1) { var b2 = this.action; if (this.disabled || !b2) { return } var b0 = this.pointers; b1.preventDefault(); if (aR(this.element, bR, { originalEvent: b1, action: b2 }) === false) { return } if (b1.changedTouches) { aq(b1.changedTouches, function (b3) { af(b0[b3.identifier] || {}, aA(b3, true)) }) } else { af(b0[b1.pointerId || 0] || {}, aA(b1, true)) } this.change(b1) }, cropEnd: function bw(b1) { if (this.disabled) { return } var b2 = this.action, b0 = this.pointers; if (b1.changedTouches) { aq(b1.changedTouches, function (b3) { delete b0[b3.identifier] }) } else { delete b0[b1.pointerId || 0] } if (!b2) { return } b1.preventDefault(); if (!Object.keys(b0).length) { this.action = "" } if (this.cropping) { this.cropping = false; a1(this.dragBox, bm, this.cropped && this.options.modal) } aR(this.element, aW, { originalEvent: b1, action: b2 }) } }; var aL = { change: function aL(cj) { var b2 = this.options, b8 = this.canvasData, b1 = this.containerData, cd = this.cropBoxData, b7 = this.pointers; var ci = this.action; var b0 = b2.aspectRatio; var b3 = cd.left, ca = cd.top, cg = cd.width, cb = cd.height; var cm = b3 + cg; var b5 = ca + cb; var cc = 0; var b6 = 0; var ck = b1.width; var cf = b1.height; var ce = true; var b4; if (!b0 && cj.shiftKey) { b0 = cg && cb ? cg / cb : 1 } if (this.limited) { cc = cd.minLeft; b6 = cd.minTop; ck = cc + Math.min(b1.width, b8.width, b8.left + b8.width); cf = b6 + Math.min(b1.height, b8.height, b8.top + b8.height) } var ch = b7[Object.keys(b7)[0]]; var b9 = { x: ch.endX - ch.startX, y: ch.endY - ch.startY }; var cl = function cl(cn) { switch (cn) { case ax: if (cm + b9.x > ck) { b9.x = ck - cm } break; case W: if (b3 + b9.x < cc) { b9.x = cc - b3 } break; case bT: if (ca + b9.y < b6) { b9.y = b6 - ca } break; case b: if (b5 + b9.y > cf) { b9.y = cf - b5 } break } }; switch (ci) { case ad: b3 += b9.x; ca += b9.y; break; case ax: if (b9.x >= 0 && (cm >= ck || b0 && (ca <= b6 || b5 >= cf))) { ce = false; break } cl(ax); cg += b9.x; if (cg < 0) { ci = W; cg = -cg; b3 -= cg } if (b0) { cb = cg / b0; ca += (cd.height - cb) / 2 } break; case bT: if (b9.y <= 0 && (ca <= b6 || b0 && (b3 <= cc || cm >= ck))) { ce = false; break } cl(bT); cb -= b9.y; ca += b9.y; if (cb < 0) { ci = b; cb = -cb; ca -= cb } if (b0) { cg = cb * b0; b3 += (cd.width - cg) / 2 } break; case W: if (b9.x <= 0 && (b3 <= cc || b0 && (ca <= b6 || b5 >= cf))) { ce = false; break } cl(W); cg -= b9.x; b3 += b9.x; if (cg < 0) { ci = ax; cg = -cg; b3 -= cg } if (b0) { cb = cg / b0; ca += (cd.height - cb) / 2 } break; case b: if (b9.y >= 0 && (b5 >= cf || b0 && (b3 <= cc || cm >= ck))) { ce = false; break } cl(b); cb += b9.y; if (cb < 0) { ci = bT; cb = -cb; ca -= cb } if (b0) { cg = cb * b0; b3 += (cd.width - cg) / 2 } break; case aY: if (b0) { if (b9.y <= 0 && (ca <= b6 || cm >= ck)) { ce = false; break } cl(bT); cb -= b9.y; ca += b9.y; cg = cb * b0 } else { cl(bT); cl(ax); if (b9.x >= 0) { if (cm < ck) { cg += b9.x } else { if (b9.y <= 0 && ca <= b6) { ce = false } } } else { cg += b9.x } if (b9.y <= 0) { if (ca > b6) { cb -= b9.y; ca += b9.y } } else { cb -= b9.y; ca += b9.y } } if (cg < 0 && cb < 0) { ci = bJ; cb = -cb; cg = -cg; ca -= cb; b3 -= cg } else { if (cg < 0) { ci = aC; cg = -cg; b3 -= cg } else { if (cb < 0) { ci = e; cb = -cb; ca -= cb } } } break; case aC: if (b0) { if (b9.y <= 0 && (ca <= b6 || b3 <= cc)) { ce = false; break } cl(bT); cb -= b9.y; ca += b9.y; cg = cb * b0; b3 += cd.width - cg } else { cl(bT); cl(W); if (b9.x <= 0) { if (b3 > cc) { cg -= b9.x; b3 += b9.x } else { if (b9.y <= 0 && ca <= b6) { ce = false } } } else { cg -= b9.x; b3 += b9.x } if (b9.y <= 0) { if (ca > b6) { cb -= b9.y; ca += b9.y } } else { cb -= b9.y; ca += b9.y } } if (cg < 0 && cb < 0) { ci = e; cb = -cb; cg = -cg; ca -= cb; b3 -= cg } else { if (cg < 0) { ci = aY; cg = -cg; b3 -= cg } else { if (cb < 0) { ci = bJ; cb = -cb; ca -= cb } } } break; case bJ: if (b0) { if (b9.x <= 0 && (b3 <= cc || b5 >= cf)) { ce = false; break } cl(W); cg -= b9.x; b3 += b9.x; cb = cg / b0 } else { cl(b); cl(W); if (b9.x <= 0) { if (b3 > cc) { cg -= b9.x; b3 += b9.x } else { if (b9.y >= 0 && b5 >= cf) { ce = false } } } else { cg -= b9.x; b3 += b9.x } if (b9.y >= 0) { if (b5 < cf) { cb += b9.y } } else { cb += b9.y } } if (cg < 0 && cb < 0) { ci = aY; cb = -cb; cg = -cg; ca -= cb; b3 -= cg } else { if (cg < 0) { ci = e; cg = -cg; b3 -= cg } else { if (cb < 0) { ci = aC; cb = -cb; ca -= cb } } } break; case e: if (b0) { if (b9.x >= 0 && (cm >= ck || b5 >= cf)) { ce = false; break } cl(ax); cg += b9.x; cb = cg / b0 } else { cl(b); cl(ax); if (b9.x >= 0) { if (cm < ck) { cg += b9.x } else { if (b9.y >= 0 && b5 >= cf) { ce = false } } } else { cg += b9.x } if (b9.y >= 0) { if (b5 < cf) { cb += b9.y } } else { cb += b9.y } } if (cg < 0 && cb < 0) { ci = aC; cb = -cb; cg = -cg; ca -= cb; b3 -= cg } else { if (cg < 0) { ci = bJ; cg = -cg; b3 -= cg } else { if (cb < 0) { ci = aY; cb = -cb; ca -= cb } } } break; case bI: this.move(b9.x, b9.y); ce = false; break; case E: this.zoom(bd(b7), cj); ce = false; break; case bb: if (!b9.x || !b9.y) { ce = false; break } b4 = bV(this.cropper); b3 = ch.startX - b4.left; ca = ch.startY - b4.top; cg = cd.minWidth; cb = cd.minHeight; if (b9.x > 0) { ci = b9.y > 0 ? e : aY } else { if (b9.x < 0) { b3 -= cg; ci = b9.y > 0 ? bJ : aC } } if (b9.y < 0) { ca -= cb } if (!this.cropped) { a3(this.cropBox, g); this.cropped = true; if (this.limited) { this.limitCropBox(true, true) } } break }if (ce) { cd.width = cg; cd.height = cb; cd.left = b3; cd.top = ca; this.action = ci; this.renderCropBox() } aq(b7, function (cn) { cn.startX = cn.endX; cn.startY = cn.endY }) } }; var aw = { crop: function o() { if (this.ready && !this.cropped && !this.disabled) { this.cropped = true; this.limitCropBox(true, true); if (this.options.modal) { x(this.dragBox, bm) } a3(this.cropBox, g); this.setCropBoxData(this.initialCropBoxData) } return this }, reset: function a9() { if (this.ready && !this.disabled) { this.imageData = af({}, this.initialImageData); this.canvasData = af({}, this.initialCanvasData); this.cropBoxData = af({}, this.initialCropBoxData); this.renderCanvas(); if (this.cropped) { this.renderCropBox() } } return this }, clear: function bL() { if (this.cropped && !this.disabled) { af(this.cropBoxData, { left: 0, top: 0, width: 0, height: 0 }); this.cropped = false; this.renderCropBox(); this.limitCanvas(true, true); this.renderCanvas(); a3(this.dragBox, bm); x(this.cropBox, g) } return this }, replace: function aT(b1) { var b0 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; if (!this.disabled && b1) { if (this.isImg) { this.element.src = b1 } if (b0) { this.url = b1; this.image.src = b1; if (this.ready) { this.viewBoxImage.src = b1; aq(this.previews, function (b2) { b2.getElementsByTagName("img")[0].src = b1 }) } } else { if (this.isImg) { this.replaced = true } this.options.data = null; this.uncreate(); this.load(b1) } } return this }, enable: function m() { if (this.ready && this.disabled) { this.disabled = false; a3(this.cropper, f) } return this }, disable: function aD() { if (this.ready && !this.disabled) { this.disabled = true; x(this.cropper, f) } return this }, destroy: function t() { var b0 = this.element; if (!b0[L]) { return this } b0[L] = undefined; if (this.isImg && this.replaced) { b0.src = this.originalUrl } this.uncreate(); return this }, move: function K(b0) { var b4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : b0; var b1 = this.canvasData, b3 = b1.left, b2 = b1.top; return this.moveTo(aN(b0) ? b0 : b3 + Number(b0), aN(b4) ? b4 : b2 + Number(b4)) }, moveTo: function bz(b0) { var b3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : b0; var b1 = this.canvasData; var b2 = false; b0 = Number(b0); b3 = Number(b3); if (this.ready && !this.disabled && this.options.movable) { if (ae(b0)) { b1.left = b0; b2 = true } if (ae(b3)) { b1.top = b3; b2 = true } if (b2) { this.renderCanvas(true) } } return this }, zoom: function aZ(b2, b0) { var b1 = this.canvasData; b2 = Number(b2); if (b2 < 0) { b2 = 1 / (1 - b2) } else { b2 = 1 + b2 } return this.zoomTo(b1.width * b2 / b1.naturalWidth, null, b0) }, zoomTo: function aS(b7, cb, b8) { var cd = this.options, b4 = this.canvasData; var b2 = b4.width, cc = b4.height, b6 = b4.naturalWidth, b9 = b4.naturalHeight; b7 = Number(b7); if (b7 >= 0 && this.ready && !this.disabled && cd.zoomable) { var b5 = b6 * b7; var b1 = b9 * b7; if (aR(this.element, ao, { ratio: b7, oldRatio: b2 / b6, originalEvent: b8 }) === false) { return this } if (b8) { var ca = this.pointers; var b3 = bV(this.cropper); var b0 = ca && Object.keys(ca).length ? bs(ca) : { pageX: b8.pageX, pageY: b8.pageY }; b4.left -= (b5 - b2) * ((b0.pageX - b3.left - b4.left) / b2); b4.top -= (b1 - cc) * ((b0.pageY - b3.top - b4.top) / cc) } else { if (w(cb) && ae(cb.x) && ae(cb.y)) { b4.left -= (b5 - b2) * ((cb.x - b4.left) / b2); b4.top -= (b1 - cc) * ((cb.y - b4.top) / cc) } else { b4.left -= (b5 - b2) / 2; b4.top -= (b1 - cc) / 2 } } b4.width = b5; b4.height = b1; this.renderCanvas(true) } return this }, rotate: function v(b0) { return this.rotateTo((this.imageData.rotate || 0) + Number(b0)) }, rotateTo: function bY(b0) { b0 = Number(b0); if (ae(b0) && this.ready && !this.disabled && this.options.rotatable) { this.imageData.rotate = b0 % 360; this.renderCanvas(true, true) } return this }, scaleX: function V(b1) { var b0 = this.imageData.scaleY; return this.scale(b1, ae(b0) ? b0 : 1) }, scaleY: function T(b1) { var b0 = this.imageData.scaleX; return this.scale(ae(b0) ? b0 : 1, b1) }, scale: function aV(b2) { var b0 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : b2; var b3 = this.imageData; var b1 = false; b2 = Number(b2); b0 = Number(b0); if (this.ready && !this.disabled && this.options.scalable) { if (ae(b2)) { b3.scaleX = b2; b1 = true } if (ae(b0)) { b3.scaleY = b0; b1 = true } if (b1) { this.renderCanvas(true, true) } } return this }, getData: function be() { var b3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false; var b8 = this.options, b0 = this.imageData, b4 = this.canvasData, b2 = this.cropBoxData; var b5; if (this.ready && this.cropped) { b5 = { x: b2.left - b4.left, y: b2.top - b4.top, width: b2.width, height: b2.height }; var b6 = b0.width / b0.naturalWidth; aq(b5, function (ca, b9) { b5[b9] = ca / b6 }); if (b3) { var b1 = Math.round(b5.y + b5.height); var b7 = Math.round(b5.x + b5.width); b5.x = Math.round(b5.x); b5.y = Math.round(b5.y); b5.width = b7 - b5.x; b5.height = b1 - b5.y } } else { b5 = { x: 0, y: 0, width: 0, height: 0 } } if (b8.rotatable) { b5.rotate = b0.rotate || 0 } if (b8.scalable) { b5.scaleX = b0.scaleX || 1; b5.scaleY = b0.scaleY || 1 } return b5 }, setData: function at(b5) { var b2 = this.options, b6 = this.imageData, b1 = this.canvasData; var b4 = {}; if (this.ready && !this.disabled && w(b5)) { var b0 = false; if (b2.rotatable) { if (ae(b5.rotate) && b5.rotate !== b6.rotate) { b6.rotate = b5.rotate; b0 = true } } if (b2.scalable) { if (ae(b5.scaleX) && b5.scaleX !== b6.scaleX) { b6.scaleX = b5.scaleX; b0 = true } if (ae(b5.scaleY) && b5.scaleY !== b6.scaleY) { b6.scaleY = b5.scaleY; b0 = true } } if (b0) { this.renderCanvas(true, true) } var b3 = b6.width / b6.naturalWidth; if (ae(b5.x)) { b4.left = b5.x * b3 + b1.left } if (ae(b5.y)) { b4.top = b5.y * b3 + b1.top } if (ae(b5.width)) { b4.width = b5.width * b3 } if (ae(b5.height)) { b4.height = b5.height * b3 } this.setCropBoxData(b4) } return this }, getContainerData: function a5() { return this.ready ? af({}, this.containerData) : {} }, getImageData: function ac() { return this.sized ? af({}, this.imageData) : {} }, getCanvasData: function Y() { var b0 = this.canvasData; var b1 = {}; if (this.ready) { aq(["left", "top", "width", "height", "naturalWidth", "naturalHeight"], function (b2) { b1[b2] = b0[b2] }) } return b1 }, setCanvasData: function c(b2) { var b0 = this.canvasData; var b1 = b0.aspectRatio; if (this.ready && !this.disabled && w(b2)) { if (ae(b2.left)) { b0.left = b2.left } if (ae(b2.top)) { b0.top = b2.top } if (ae(b2.width)) { b0.width = b2.width; b0.height = b2.width / b1 } else { if (ae(b2.height)) { b0.height = b2.height; b0.width = b2.height * b1 } } this.renderCanvas(true) } return this }, getCropBoxData: function al() { var b1 = this.cropBoxData; var b0; if (this.ready && this.cropped) { b0 = { left: b1.left, top: b1.top, width: b1.width, height: b1.height } } return b0 || {} }, setCropBoxData: function aP(b4) { var b3 = this.cropBoxData; var b1 = this.options.aspectRatio; var b2; var b0; if (this.ready && this.cropped && !this.disabled && w(b4)) { if (ae(b4.left)) { b3.left = b4.left } if (ae(b4.top)) { b3.top = b4.top } if (ae(b4.width) && b4.width !== b3.width) { b2 = true; b3.width = b4.width } if (ae(b4.height) && b4.height !== b3.height) { b0 = true; b3.height = b4.height } if (b1) { if (b2) { b3.height = b3.width / b1 } else { if (b0) { b3.width = b3.height * b1 } } } this.renderCropBox() } return this }, getCroppedCanvas: function an() { var ca = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; if (!this.ready || !window.HTMLCanvasElement) { return null } var cg = this.canvasData; var cm = a4(this.image, this.imageData, cg, ca); if (!this.cropped) { return cm } var cf = this.getData(), ct = cf.x, cs = cf.y, cc = cf.width, co = cf.height; var ce = cm.width / Math.floor(cg.naturalWidth); if (ce !== 1) { ct *= ce; cs *= ce; cc *= ce; co *= ce } var b2 = cc / co; var cb = bv({ aspectRatio: b2, width: ca.maxWidth || Infinity, height: ca.maxHeight || Infinity }); var cr = bv({ aspectRatio: b2, width: ca.minWidth || 0, height: ca.minHeight || 0 }, "cover"); var cd = bv({ aspectRatio: b2, width: ca.width || (ce !== 1 ? cm.width : cc), height: ca.height || (ce !== 1 ? cm.height : co) }), cl = cd.width, ck = cd.height; cl = Math.min(cb.width, Math.max(cr.width, cl)); ck = Math.min(cb.height, Math.max(cr.height, ck)); var b9 = document.createElement("canvas"); var b5 = b9.getContext("2d"); b9.width = bo(cl); b9.height = bo(ck); b5.fillStyle = ca.fillColor || "transparent"; b5.fillRect(0, 0, cl, ck); var cn = ca.imageSmoothingEnabled, b1 = cn === void 0 ? true : cn, b7 = ca.imageSmoothingQuality; b5.imageSmoothingEnabled = b1; if (b7) { b5.imageSmoothingQuality = b7 } var ch = cm.width; var b6 = cm.height; var b0 = ct; var cv = cs; var cj; var cq; var b4; var b3; var b8; var ci; if (b0 <= -cc || b0 > ch) { b0 = 0; cj = 0; b4 = 0; b8 = 0 } else { if (b0 <= 0) { b4 = -b0; b0 = 0; cj = Math.min(ch, cc + b0); b8 = cj } else { if (b0 <= ch) { b4 = 0; cj = Math.min(cc, ch - b0); b8 = cj } } } if (cj <= 0 || cv <= -co || cv > b6) { cv = 0; cq = 0; b3 = 0; ci = 0 } else { if (cv <= 0) { b3 = -cv; cv = 0; cq = Math.min(b6, co + cv); ci = cq } else { if (cv <= b6) { b3 = 0; cq = Math.min(co, b6 - cv); ci = cq } } } var cp = [b0, cv, cj, cq]; if (b8 > 0 && ci > 0) { var cu = cl / cc; cp.push(b4 * cu, b3 * cu, b8 * cu, ci * cu) } b5.drawImage.apply(b5, [cm].concat(am(cp.map(function (cw) { return Math.floor(bo(cw)) })))); return b9 }, setAspectRatio: function D(b1) { var b0 = this.options; if (!this.disabled && !aN(b1)) { b0.aspectRatio = Math.max(0, b1) || NaN; if (this.ready) { this.initCropBox(); if (this.cropped) { this.renderCropBox() } } } return this }, setDragMode: function ab(b5) { var b0 = this.options, b1 = this.dragBox, b2 = this.face; if (this.ready && !this.disabled) { var b4 = b5 === ap; var b3 = b0.movable && b5 === aM; b5 = b4 || b3 ? b5 : ar; b0.dragMode = b5; at(b1, bn, b5); a1(b1, by, b4); a1(b1, bX, b3); if (!b0.cropBoxMovable) { at(b2, bn, b5); a1(b2, by, b4); a1(b2, bX, b3) } } return this } }; var P = av.Cropper; var Q = function () { function b7(cd) { var cc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; aB(this, b7); if (!cd || !a8.test(cd.tagName)) { throw new Error("The first argument is required and must be an <img> or <canvas> element.") } this.element = cd; this.options = af({}, U, w(cc) && cc); this.cropped = false; this.disabled = false; this.pointers = {}; this.ready = false; this.reloading = false; this.replaced = false; this.sized = false; this.sizing = false; this.init() } a6(b7, [{ key: "init", value: function ca() { var ce = this.element; var cd = ce.tagName.toLowerCase(); var cc; if (ce[L]) { return } ce[L] = this; if (cd === "img") { this.isImg = true; cc = ce.getAttribute("src") || ""; this.originalUrl = cc; if (!cc) { return } cc = ce.src } else { if (cd === "canvas" && window.HTMLCanvasElement) { cc = ce.toDataURL() } } this.load(cc) } }, { key: "load", value: function b9(cd) { var ch = this; if (!cd) { return } this.url = cd; this.imageData = {}; var ce = this.element, cc = this.options; if (!cc.rotatable && !cc.scalable) { cc.checkOrientation = false } if (!cc.checkOrientation || !window.ArrayBuffer) { this.clone(); return } if (a7.test(cd)) { if (bD.test(cd)) { this.read(aE(cd)) } else { this.clone() } return } var cf = new XMLHttpRequest(); var cg = this.clone.bind(this); this.reloading = true; this.xhr = cf; cf.onabort = cg; cf.onerror = cg; cf.ontimeout = cg; cf.onprogress = function () { if (cf.getResponseHeader("content-type") !== aH) { cf.abort() } }; cf.onload = function () { ch.read(cf.response) }; cf.onloadend = function () { ch.reloading = false; ch.xhr = null }; if (cc.checkCrossOrigin && bi(cd) && ce.crossOrigin) { cd = bP(cd) } cf.open("GET", cd); cf.responseType = "arraybuffer"; cf.withCredentials = ce.crossOrigin === "use-credentials"; cf.send() } }, { key: "read", value: function b2(ch) { var cg = this.options, cj = this.imageData; var cd = y(ch); var cf = 0; var ce = 1; var cc = 1; if (cd > 1) { this.url = Z(ch, aH); var ci = k(cd); cf = ci.rotate; ce = ci.scaleX; cc = ci.scaleY } if (cg.rotatable) { cj.rotate = cf } if (cg.scalable) { cj.scaleX = ce; cj.scaleY = cc } this.clone() } }, { key: "clone", value: function b5() { var ce = this.element, cd = this.url; var cc = ce.crossOrigin; var cf = cd; if (this.options.checkCrossOrigin && bi(cd)) { if (!cc) { cc = "anonymous" } cf = bP(cd) } this.crossOrigin = cc; this.crossOriginUrl = cf; var cg = document.createElement("img"); if (cc) { cg.crossOrigin = cc } cg.src = cf || cd; cg.alt = ce.alt || "The image to crop"; this.image = cg; cg.onload = this.start.bind(this); cg.onerror = this.stop.bind(this); x(cg, ai); ce.parentNode.insertBefore(cg, ce.nextSibling) } }, { key: "start", value: function b1() { var cf = this; var ch = this.image; ch.onload = null; ch.onerror = null; this.sizing = true; var ce = av.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(av.navigator.userAgent); var cd = function cd(ci, cj) { af(cf.imageData, { naturalWidth: ci, naturalHeight: cj, aspectRatio: ci / cj }); cf.sizing = false; cf.sized = true; cf.build() }; if (ch.naturalWidth && !ce) { cd(ch.naturalWidth, ch.naturalHeight); return } var cg = document.createElement("img"); var cc = document.body || document.documentElement; this.sizingImage = cg; cg.onload = function () { cd(cg.width, cg.height); if (!ce) { cc.removeChild(cg) } }; cg.src = ch.src; if (!ce) { cg.style.cssText = "left:0;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;opacity:0;position:absolute;top:0;z-index:-1;"; cc.appendChild(cg) } } }, { key: "stop", value: function b6() { var cc = this.image; cc.onload = null; cc.onerror = null; cc.parentNode.removeChild(cc); this.image = null } }, { key: "build", value: function b8() { if (!this.sized || this.ready) { return } var ci = this.element, cl = this.options, cf = this.image; var cd = ci.parentNode; var ck = document.createElement("div"); ck.innerHTML = ak; var cc = ck.querySelector(".".concat(L, "-container")); var ce = cc.querySelector(".".concat(L, "-canvas")); var ch = cc.querySelector(".".concat(L, "-drag-box")); var cg = cc.querySelector(".".concat(L, "-crop-box")); var cj = cg.querySelector(".".concat(L, "-face")); this.container = cd; this.cropper = cc; this.canvas = ce; this.dragBox = ch; this.cropBox = cg; this.viewBox = cc.querySelector(".".concat(L, "-view-box")); this.face = cj; ce.appendChild(cf); x(ci, g); cd.insertBefore(cc, ci.nextSibling); if (!this.isImg) { a3(cf, ai) } this.initPreview(); this.bind(); cl.initialAspectRatio = Math.max(0, cl.initialAspectRatio) || NaN; cl.aspectRatio = Math.max(0, cl.aspectRatio) || NaN; cl.viewMode = Math.max(0, Math.min(3, Math.round(cl.viewMode))) || 0; x(cg, g); if (!cl.guides) { x(cg.getElementsByClassName("".concat(L, "-dashed")), g) } if (!cl.center) { x(cg.getElementsByClassName("".concat(L, "-center")), g) } if (cl.background) { x(cc, "".concat(L, "-bg")) } if (!cl.highlight) { x(cj, ah) } if (cl.cropBoxMovable) { x(cj, bX); at(cj, bn, ad) } if (!cl.cropBoxResizable) { x(cg.getElementsByClassName("".concat(L, "-line")), g); x(cg.getElementsByClassName("".concat(L, "-point")), g) } this.render(); this.ready = true; this.setDragMode(cl.dragMode); if (cl.autoCrop) { this.crop() } this.setData(cl.data); if (n(cl.ready)) { bt(ci, aj, cl.ready, { once: true }) } aR(ci, aj) } }, { key: "unbuild", value: function cb() { if (!this.ready) { return } this.ready = false; this.unbind(); this.resetPreview(); this.cropper.parentNode.removeChild(this.cropper); a3(this.element, g) } }, { key: "uncreate", value: function b0() { if (this.ready) { this.unbuild(); this.ready = false; this.cropped = false } else { if (this.sizing) { this.sizingImage.onload = null; this.sizing = false; this.sized = false } else { if (this.reloading) { this.xhr.onabort = null; this.xhr.abort() } else { if (this.image) { this.stop() } } } } } }], [{ key: "noConflict", value: function b3() { window.Cropper = P; return b7 } }, { key: "setDefaults", value: function b4(cc) { af(U, w(cc) && cc) } }]); return b7 }(); af(Q.prototype, X, a, bQ, a2, aL, aw); return Q })));